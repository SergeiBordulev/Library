USE library;

/*
Тестовое задание
Необходимо разработать некоторые части приложения для учета книг в библиотеке. Описание данных, с которыми будет работать приложение – ниже.
Приложение для учета книг в библиотеке должно:
1. Хранить названия книг, ФИО авторов, наименования издательств, год издания.
2. Учитывать имеющиеся в библиотеке экземпляры конкретной книги.
3. Учитывать студентов, которым выдавалась конкретная книга. При каждой выдаче книги студенту, фиксируется дата выдачи. При возврате – дата возврата книги.
Задания:
1.	Опишите модель данных (в любом удобном для вас представлении) для обслуживания библиотеки. Это может быть описание таблиц с типами данных, диаграмма – что угодно.
2.	Напишите SQL-запрос, который бы возвращал самого популярного автора за год. Запрос должен основываться на модели данных, которую вы описали в задании 1. 
*/

-- SQL-запрос возвращающий самого популярного автора за год. 

SELECT a.authorName AS BestAuthor -- выводим поля authorName из таблицы author с заданым алиасом BestAuthor
FROM ordersTable AS o
INNER JOIN book AS b -- обьединяем ordersTable с таблицей book
 	ON b.id = o.bookId -- задаем связь 
LEFT JOIN author AS a -- обьединяем book с таблицей author
	ON a.id = b.id -- задаем связь 
WHERE dateStart > '2017-01-01' AND dateStart < '2017-12-31' -- задаем условие для отбора (один год)
GROUP BY a.authorName -- задаем группировку по имени автора
ORDER BY BestAuthor DESC LIMIT 1 -- задаем сортировку выходных значений, DESC по убыванию и выбираем одно первое значение
;

/* Пример SQL-запроса для получения разницы между текущей датой (curdate()) и датой когда книгу взяли (dateStart) */

SELECT DATEDIFF(curdate(), dateStart)
FROM ordersTable
WHERE id = 1 -- меняем значение исходя из итерации
;

/* Пример SQL-запроса для получения разницы между датой когда книгу вернули (dateEnd) и датой когда книгу взяли (dateStart) */

SELECT DATEDIFF(dateEnd, dateStart)
FROM ordersTable
WHERE id = 1 -- меняем значение исходя из итерации
;

/* Пример SQL-запроса для получения имени должника, зная id записи в ordersTable: */

SELECT s.studentsLastName AS 'Debtor Last Name', s.studentsFirstName AS 'Debtor First Name' -- выводим поля studentsLastName и studentsFirstName из таблицы students с заданым алиасом
FROM ordersTable AS o
INNER JOIN students AS s -- обьединяем ordersTable с таблицей students
 	ON s.id = o.studentId -- задаем связь
WHERE o.id=1 -- указываем требуемое значение id, какой записи требуется получить имя и фамилию студента
;
